# Generated by Django 3.2.9 on 2021-12-08 16:03

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import eo_engine.models.eo_product
import eo_engine.models.eo_source


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Credentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=255, unique=True)),
                ('username', models.CharField(max_length=255, null=True)),
                ('password', models.CharField(max_length=255, null=True)),
                ('api_key', models.CharField(max_length=2048, null=True)),
                ('type', models.CharField(choices=[('USER/PASS', 'USERNAME-PASSWORD'), ('API-KEY', 'API-KEY')], db_column='type', default='USER/PASS', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='EOProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(unique=True)),
                ('output_folder', models.TextField()),
                ('group', models.CharField(choices=[('AGRO_NDVI_1KM_V3_AFR', 'AUTH/AGRO/NDVI 1km, V3 Africa'), ('AGRO_NDVI_300M_V3_AFR', 'AUTH/AGRO/NDVI 300m, V3 Africa'), ('AGRO_VCI_1KM_V2_AFR', 'AUTH/AGRO/VCI 1km, V2 Africa'), ('AGRO_LAI_300M_V1_AFR', 'AUTH/AGRO/LAI 300m, V1 Africa'), ('AGRO_LAI_1KM_V2_AFR', 'AUTH/AGRO/LAI 1km, V2 Africa'), ('AGRO_WB_100M_ETH', 'AGRO_WB_100_M_ETH'), ('AGRO_WB_100M_GHA', 'AGRO_WB_100_M_GHA'), ('AGRO_WB_100M_KEN', 'AGRO_WB_100_M_KEN'), ('AGRO_WB_100M_MOZ', 'AGRO_WB_100_M_MOZ'), ('AGRO_WB_100M_NER', 'AGRO_WB_100_M_NER'), ('AGRO_WB_100M_RWA', 'AGRO_WB_100_M_RWA'), ('AGRO_WB_100M_TUN', 'AGRO_WB_100_M_TUN'), ('AGRO_WB_100M_ZAF', 'AGRO_WB_100_M_ZAF'), ('AGRO_WB_300M_V2_AFR', 'Agro Wb 300M V2 Afr'), ('MSG_3KM_AFR', 'LSA-SAF 3km Africa'), ('VIIRS_1DAY_AFR', 'VIIRS 1day AFR'), ('AGRO_NDVIA_TUN', 'AGRO_NDVIA_TUN'), ('AGRO_NDVIA_RWA', 'AGRO_NDVIA_RWA'), ('AGRO_NDVIA_ETH', 'AGRO_NDVIA_ETH'), ('AGRO_NDVIA_ZAF', 'AGRO_NDVIA_ZAF'), ('AGRO_NDVIA_NER', 'AGRO_NDVIA_NER'), ('AGRO_NDVIA_GHA', 'AGRO_NDVIA_GHA'), ('AGRO_NDVIA_MOZ', 'AGRO_NDVIA_MOZ'), ('AGRO_NDVIA_KEN', 'AGRO_NDVIA_KEN')], max_length=255)),
                ('datetime_creation', models.DateTimeField(null=True)),
                ('file', models.FileField(max_length=2048, null=True, upload_to=eo_engine.models.eo_product._upload_to)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('state', models.CharField(choices=[('Available', 'AVAILABLE for generation.'), ('Scheduled', 'SCHEDULED For generation.'), ('Failed', 'Generation was attempted but FAILED'), ('Generating', 'GENERATING...'), ('Ignore', 'Skip generation (Ignored) .'), ('Ready', 'Product is READY.'), ('MISSING_SOURCE', 'Some or all EOSouce(s) Are Not Available')], default='Available', max_length=255)),
                ('task_name', models.CharField(max_length=255)),
                ('task_kwargs', models.JSONField(default=dict)),
                ('eo_products_inputs', models.ManyToManyField(related_name='depended_eo_product', related_query_name='depended_eo_products', to='eo_engine.EOProduct')),
            ],
            options={
                'ordering': ['group', 'filename'],
            },
        ),
        migrations.CreateModel(
            name='EOSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_seen', models.DateTimeField(auto_created=True, help_text='datetime of when it was seen')),
                ('state', models.CharField(choices=[('availableRemotely', 'Available on the Remote Server'), ('ScheduledForDownload', 'Scheduled For Download'), ('availableLocally', 'File is Available Locally'), ('BeingDownloaded', 'Downloading File...'), ('FailedToDownload', 'Failed to Download'), ('Ignore', 'Action on this file has been canceled (Ignored/Revoked Action)'), ('Defer', 'Download has been deferred for later')], default='availableRemotely', max_length=255)),
                ('group', models.CharField(choices=[('C_GLS_LAI_300M_V1_GLOB', 'Copernicus Global Land Service LAI 300m v1'), ('AGRO_LAI_300M_V1_AFR', 'AuthAgro LAI 300M V1'), ('C_GlS_NDVI_1KM_V3_GLOB', 'Copernicus Global Land Service NDVI 1km v3'), ('C_GLS_NDVI_300M_V2_GLOB', 'Copernicus Global Land Service NDVI 300m v2'), ('A_AGRO_NDVI_300M_V3_AFR', 'AuthAgro Service NDVI 300M v3'), ('A_AGRO_NDVI_1KM_V3_AFR', 'AuthAgro Service NDVU 1KM V3 Africa'), ('C_GLS_WB_100M_V1_GLOB', 'Copernicus Global Land Service Water Bodies Collection 100m Version 1'), ('C_GLS_WB_300M_V2_GLOB', 'Copernicus Global Land Service Water Bodies Collection 300m Version 2'), ('MSG_3KM_GLOB', 'LSA-SAF Global ET product 3Km'), ('WAPOR_L1_AETI_D_AFRICA', 'WAPOR: L1 AETI D AFRICA'), ('WAPOR_L1_QUAL_LST_D_AFRICA', 'WAPOR: L1_QUAL_LST_D_AFRICA'), ('WAPOR_L1_QUAL_NDVI_D_AFRICA', 'WAPOR: L1_QUAL_NDVI_D_AFRICA'), ('WAPOR_L2_AETI_D_TUN', 'WAPOR: L2_AETI_D_TUN'), ('WAPOR_L2_QUAL_LST_D_TUN', 'WAPOR: L2_QUAL_LST_D_TUN'), ('WAPOR_L2_QUAL_NDVI_D_TUN', 'WAPOR: L2_QUAL_NDVI_D_TUN'), ('WAPOR_L2_AETI_D_KEN', 'WAPOR: L2_AETI_D_KEN'), ('WAPOR_L2_QUAL_LST_D_KEN', 'WAPOR: L2_QUAL_LST_D_KEN'), ('WAPOR_L2_QUAL_NDVI_D_KEN', 'WAPOR: L2_QUAL_NDVI_D_KEN'), ('WAPOR_L2_AETI_D_MOZ', 'WAPOR: L2_AETI_D_MOZ'), ('WAPOR_L2_QUAL_LST_D_MOZ', 'WAPOR: L2_QUAL_LST_D_MOZ'), ('WAPOR_L2_QUAL_NDVI_D_MOZ', 'WAPOR: L2_QUAL_NDVI_D_MOZ'), ('WAPOR_L2_AETI_D_RWA', 'WAPOR: L2_AETI_D_DRWA'), ('WAPOR_L2_QUAL_LST_D_RWA', 'WAPOR: L2_QUAL_LST_D_RWA'), ('WAPOR_L2_QUAL_NDVI_D_RWA', 'WAPOR: L2_QUAL_NDVI_D_RWA'), ('WAPOR_L2_AETI_D_ETH', 'WAPOR: WAPOR_L2_AETI_D_ETH'), ('WAPOR_L2_QUAL_LST_D_ETH', 'WAPOR: L2_QUAL_LST_D_ETH'), ('WAPOR_L2_QUAL_NDVI_D_ETH', 'WAPOR: L2_QUAL_NDVI_D_ETH'), ('WAPOR_L2_AETI_D_GHA', 'WAPOR: L2_AETI_GHA'), ('WAPOR_L2_QUAL_LST_D_GHA', 'WAPOR: L2_QUAL_LST_D_GHA'), ('WAPOR_L2_QUAL_NDVI_GHA', 'WAPOR: L2_QUAL_NDVI_D_GHA'), ('FLOODLIGHT_VIIRS_1_DAY', 'VIIRS-1day'), ('GMOD09Q1_NDVI_ANOM_TUN', 'GMOD09Q1_NDVI_ANOM_TUN'), ('GMOD09Q1_NDVI_ANOM_RWA', 'GMOD09Q1_NDVI_ANOM_RWA'), ('GMOD09Q1_NDVI_ANOM_ETH', 'GMOD09Q1_NDVI_ANOM_ETH'), ('GMOD09Q1_NDVI_ANOM_ZAF', 'GMOD09Q1_NDVI_ANOM_ZAF'), ('GMOD09Q1_NDVI_ANOM_NER', 'GMOD09Q1_NDVI_ANOM_NER'), ('GMOD09Q1_NDVI_ANOM_GHA', 'GMOD09Q1_NDVI_ANOM_GHA'), ('GMOD09Q1_NDVI_ANOM_MOZ', 'GMOD09Q1_NDVI_ANOM_MOZ'), ('GMOD09Q1_NDVI_ANOM_KEN', 'GMOD09Q1_NDVI_ANOM_KEN')], max_length=255)),
                ('file', models.FileField(editable=False, max_length=2048, null=True, upload_to=eo_engine.models.eo_source._file_storage_path)),
                ('filename', models.CharField(max_length=255, unique=True)),
                ('domain', models.CharField(max_length=200)),
                ('filesize_reported', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('datetime_reference', models.DateTimeField(help_text='product reference datetime ', null=True)),
                ('url', models.URLField(help_text='Resource URL')),
                ('credentials', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='eo_engine.credentials')),
            ],
            options={
                'ordering': ['group', '-datetime_reference'],
            },
        ),
        migrations.CreateModel(
            name='EOSourceMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('from_date', models.DateField()),
                ('notes', models.TextField(default='')),
                ('group', models.TextField(choices=[('C_GLS_LAI_300M_V1_GLOB', 'Copernicus Global Land Service LAI 300m v1'), ('AGRO_LAI_300M_V1_AFR', 'AuthAgro LAI 300M V1'), ('C_GlS_NDVI_1KM_V3_GLOB', 'Copernicus Global Land Service NDVI 1km v3'), ('C_GLS_NDVI_300M_V2_GLOB', 'Copernicus Global Land Service NDVI 300m v2'), ('A_AGRO_NDVI_300M_V3_AFR', 'AuthAgro Service NDVI 300M v3'), ('A_AGRO_NDVI_1KM_V3_AFR', 'AuthAgro Service NDVU 1KM V3 Africa'), ('C_GLS_WB_100M_V1_GLOB', 'Copernicus Global Land Service Water Bodies Collection 100m Version 1'), ('C_GLS_WB_300M_V2_GLOB', 'Copernicus Global Land Service Water Bodies Collection 300m Version 2'), ('MSG_3KM_GLOB', 'LSA-SAF Global ET product 3Km'), ('WAPOR_L1_AETI_D_AFRICA', 'WAPOR: L1 AETI D AFRICA'), ('WAPOR_L1_QUAL_LST_D_AFRICA', 'WAPOR: L1_QUAL_LST_D_AFRICA'), ('WAPOR_L1_QUAL_NDVI_D_AFRICA', 'WAPOR: L1_QUAL_NDVI_D_AFRICA'), ('WAPOR_L2_AETI_D_TUN', 'WAPOR: L2_AETI_D_TUN'), ('WAPOR_L2_QUAL_LST_D_TUN', 'WAPOR: L2_QUAL_LST_D_TUN'), ('WAPOR_L2_QUAL_NDVI_D_TUN', 'WAPOR: L2_QUAL_NDVI_D_TUN'), ('WAPOR_L2_AETI_D_KEN', 'WAPOR: L2_AETI_D_KEN'), ('WAPOR_L2_QUAL_LST_D_KEN', 'WAPOR: L2_QUAL_LST_D_KEN'), ('WAPOR_L2_QUAL_NDVI_D_KEN', 'WAPOR: L2_QUAL_NDVI_D_KEN'), ('WAPOR_L2_AETI_D_MOZ', 'WAPOR: L2_AETI_D_MOZ'), ('WAPOR_L2_QUAL_LST_D_MOZ', 'WAPOR: L2_QUAL_LST_D_MOZ'), ('WAPOR_L2_QUAL_NDVI_D_MOZ', 'WAPOR: L2_QUAL_NDVI_D_MOZ'), ('WAPOR_L2_AETI_D_RWA', 'WAPOR: L2_AETI_D_DRWA'), ('WAPOR_L2_QUAL_LST_D_RWA', 'WAPOR: L2_QUAL_LST_D_RWA'), ('WAPOR_L2_QUAL_NDVI_D_RWA', 'WAPOR: L2_QUAL_NDVI_D_RWA'), ('WAPOR_L2_AETI_D_ETH', 'WAPOR: WAPOR_L2_AETI_D_ETH'), ('WAPOR_L2_QUAL_LST_D_ETH', 'WAPOR: L2_QUAL_LST_D_ETH'), ('WAPOR_L2_QUAL_NDVI_D_ETH', 'WAPOR: L2_QUAL_NDVI_D_ETH'), ('WAPOR_L2_AETI_D_GHA', 'WAPOR: L2_AETI_GHA'), ('WAPOR_L2_QUAL_LST_D_GHA', 'WAPOR: L2_QUAL_LST_D_GHA'), ('WAPOR_L2_QUAL_NDVI_GHA', 'WAPOR: L2_QUAL_NDVI_D_GHA'), ('FLOODLIGHT_VIIRS_1_DAY', 'VIIRS-1day'), ('GMOD09Q1_NDVI_ANOM_TUN', 'GMOD09Q1_NDVI_ANOM_TUN'), ('GMOD09Q1_NDVI_ANOM_RWA', 'GMOD09Q1_NDVI_ANOM_RWA'), ('GMOD09Q1_NDVI_ANOM_ETH', 'GMOD09Q1_NDVI_ANOM_ETH'), ('GMOD09Q1_NDVI_ANOM_ZAF', 'GMOD09Q1_NDVI_ANOM_ZAF'), ('GMOD09Q1_NDVI_ANOM_NER', 'GMOD09Q1_NDVI_ANOM_NER'), ('GMOD09Q1_NDVI_ANOM_GHA', 'GMOD09Q1_NDVI_ANOM_GHA'), ('GMOD09Q1_NDVI_ANOM_MOZ', 'GMOD09Q1_NDVI_ANOM_MOZ'), ('GMOD09Q1_NDVI_ANOM_KEN', 'GMOD09Q1_NDVI_ANOM_KEN')], unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeopGroupTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_task_id', models.UUIDField(db_index=True, editable=False, unique=True)),
                ('root_id', models.UUIDField(db_index=True, editable=False, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('datetime_started', models.DateTimeField(null=True)),
                ('datetime_finished', models.DateTimeField(null=True)),
                ('op_name', models.TextField(blank=True, null=True)),
                ('op_args', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('op_kwargs', models.JSONField(default=dict)),
                ('op_initiator', models.TextField(default='', max_length=255)),
            ],
            options={
                'ordering': ['timestamp'],
                'unique_together': {('group_task_id', 'root_id')},
            },
        ),
        migrations.CreateModel(
            name='GeopTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.UUIDField(db_index=True, editable=False, unique=True)),
                ('task_name', models.TextField()),
                ('task_args', models.TextField(default='[]')),
                ('parent_id', models.UUIDField(db_index=True, editable=False, null=True)),
                ('status', models.TextField(choices=[('SUBMITTED', 'Submitted'), ('STARTED', 'Started'), ('SUCCESS', 'Success'), ('FAILURE', 'Failure'), ('REVOKED', 'Revoked'), ('RETRY', 'Retry'), ('UNKNOWN', 'Unknown')], db_index=True, default='SUBMITTED')),
                ('datetime_submitted', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('datetime_started', models.DateTimeField(blank=True, null=True)),
                ('datetime_finished', models.DateTimeField(blank=True, null=True)),
                ('time_to_complete', models.TextField(blank=True, default='')),
                ('retries', models.IntegerField(default=0)),
                ('task_kwargs', models.JSONField(default=dict)),
                ('root_id', models.UUIDField(db_index=True, editable=False, null=True)),
                ('eo_product', models.ManyToManyField(related_name='task', related_query_name='task', to='eo_engine.EOProduct')),
                ('eo_source', models.ManyToManyField(related_name='task', related_query_name='task', to='eo_engine.EOSource')),
                ('group_task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='geop_tasks', related_query_name='geop_task', to='eo_engine.geopgrouptask', to_field='group_task_id')),
            ],
            options={
                'ordering': ['datetime_submitted'],
                'get_latest_by': ['datetime_submitted'],
            },
        ),
        migrations.AddField(
            model_name='eosource',
            name='rule',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eo_engine.eosourcemeta'),
        ),
        migrations.AddField(
            model_name='eoproduct',
            name='eo_sources_inputs',
            field=models.ManyToManyField(related_name='eo_products', related_query_name='eo_product', to='eo_engine.EOSource'),
        ),
        migrations.AddIndex(
            model_name='geoptask',
            index=django.contrib.postgres.indexes.GinIndex(fields=['task_kwargs'], name='eo_engine_g_task_kw_f78125_gin'),
        ),
    ]
